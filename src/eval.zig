const p_mg = [_]i16{
    0,   0,   0,   0,   0,   0,   0,   0,
    25,  66,  47,  40,  51,  87,  108, 42,
    38,  74,  58,  56,  69,  59,  101, 53,
    30,  55,  65,  77,  82,  72,  66,  31,
    37,  67,  79,  79,  92,  70,  71,  42,
    40,  87,  80,  112, 111, 204, 29,  59,
    240, 151, 171, 227, 196, 128, -35, 54,
    0,   0,   0,   0,   0,   0,   0,   0,
};

const p_eg = [_]i16{
    0,   0,   0,   0,   0,   0,   0,   0,
    214, 225, 207, 206, 191, 201, 207, 183,
    203, 223, 193, 202, 190, 177, 203, 189,
    226, 228, 193, 185, 183, 170, 228, 189,
    268, 248, 197, 208, 174, 213, 239, 212,
    349, 336, 329, 270, 290, 219, 415, 271,
    366, 501, 436, 333, 390, 454, 464, 451,
    0,   0,   0,   0,   0,   0,   0,   0,
};

const n_mg = [_]i16{
    252, 258, 266, 264, 277, 290, 269, 224,
    239, 257, 279, 281, 282, 293, 280, 268,
    260, 291, 289, 302, 297, 297, 298, 265,
    283, 270, 296, 292, 304, 304, 309, 291,
    283, 292, 318, 323, 305, 344, 294, 323,
    267, 315, 322, 360, 359, 367, 336, 293,
    308, 264, 320, 326, 343, 422, 263, 265,
    165, 214, 112, 209, 239, 42,  93,  141,
};

const n_eg = [_]i16{
    466, 474, 445, 517, 483, 479, 443, 259,
    473, 503, 545, 538, 506, 503, 551, 494,
    511, 513, 526, 584, 598, 546, 528, 470,
    514, 624, 583, 613, 580, 574, 578, 494,
    547, 567, 587, 600, 616, 580, 562, 563,
    513, 553, 600, 552, 584, 596, 576, 531,
    483, 517, 566, 586, 516, 521, 484, 501,
    412, 587, 534, 566, 532, 506, 542, 478,
};

const b_mg = [_]i16{
    265, 312, 298, 291, 323, 289, 264, 270,
    309, 318, 311, 303, 311, 319, 328, 311,
    302, 329, 312, 321, 316, 322, 317, 331,
    323, 328, 320, 350, 344, 322, 323, 305,
    307, 309, 329, 355, 354, 334, 341, 301,
    337, 332, 318, 346, 384, 365, 305, 350,
    263, 295, 326, 357, 362, 312, 370, 305,
    269, 308, 317, 78,  113, 65,  245, 243,
};

const b_eg = [_]i16{
    549, 503, 499, 605, 534, 538, 564, 638,
    519, 531, 572, 581, 595, 569, 561, 539,
    572, 588, 617, 613, 605, 590, 561, 516,
    563, 594, 641, 615, 611, 598, 594, 517,
    574, 601, 615, 623, 606, 586, 560, 588,
    579, 623, 611, 598, 565, 653, 656, 523,
    588, 560, 605, 583, 591, 616, 557, 522,
    512, 554, 552, 640, 654, 672, 571, 645,
};

const r_mg = [_]i16{
    366, 367, 379, 383, 393, 376, 317, 339,
    337, 361, 341, 364, 362, 378, 361, 316,
    346, 318, 371, 378, 376, 362, 370, 353,
    358, 335, 355, 361, 379, 388, 373, 356,
    358, 357, 394, 403, 381, 386, 390, 370,
    368, 362, 386, 440, 450, 434, 409, 384,
    390, 404, 443, 481, 493, 480, 448, 397,
    461, 466, 459, 481, 471, 449, 532, 521,
};

const r_eg = [_]i16{
    916, 946, 952, 952, 935, 941, 954, 892,
    941, 926, 956, 935, 926, 929, 918, 909,
    932, 956, 932, 937, 912, 925, 928, 912,
    967, 958, 977, 962, 955, 943, 950, 926,
    970, 984, 987, 976, 978, 994, 973, 945,
    997, 997, 978, 985, 970, 991, 976, 962,
    998, 992, 988, 978, 978, 953, 968, 979,
    954, 967, 964, 971, 975, 985, 962, 938,
};

const q_mg = [_]i16{
    1046, 1048, 1033, 1046, 1028, 1033, 1066, 1087,
    1013, 1052, 1051, 1031, 1040, 1056, 1048, 1024,
    1023, 1051, 1046, 1031, 1016, 1035, 1036, 1032,
    1056, 1010, 1028, 1037, 1034, 1027, 1042, 1024,
    1014, 1014, 1016, 1045, 1048, 1058, 1024, 1045,
    1011, 1039, 1066, 1046, 1099, 1066, 1041, 1066,
    1008, 1010, 1044, 979,  992,  1035, 1030, 1114,
    944,  1086, 1122, 1193, 1103, 1086, 1050, 1032,
};

const q_eg = [_]i16{
    1528, 1485, 1537, 1531, 1546, 1467, 1448, 1107,
    1450, 1564, 1544, 1574, 1551, 1529, 1495, 1570,
    1584, 1562, 1600, 1609, 1651, 1622, 1619, 1589,
    1545, 1617, 1655, 1693, 1684, 1678, 1594, 1624,
    1584, 1685, 1672, 1664, 1728, 1662, 1725, 1595,
    1657, 1577, 1602, 1714, 1700, 1730, 1709, 1666,
    1665, 1613, 1678, 1732, 1749, 1704, 1733, 1555,
    1692, 1593, 1616, 1539, 1665, 1670, 1695, 1663,
};

const k_mg = [_]i16{
    -66,  37,   19,   -70,  22,   -36,  41,   40,
    27,   -16,  -10,  -77,  -85,  -33,  11,   24,
    -81,  -49,  -111, -119, -175, -74,  -52,  -69,
    -68,  44,   -100, -72,  -163, -160, -132, -125,
    -62,  -193, -79,  -209, -124, -94,  -313, -300,
    -128, -2,   -77,  -104, -183, -18,  -31,  -275,
    -182, -66,  -70,  -18,  240,  -130, -224, 9,
    629,  106,  370,  190,  -50,  -61,  -308, 709,
};

const k_eg = [_]i16{
    -105, -72, -56, -62, -121, -67, -86, -127,
    -57,  -17, -12, 8,   -6,   -17, -40, -73,
    11,   9,   28,  27,  51,   12,  -4,  -34,
    -23,  9,   63,  39,  62,   46,  37,  -41,
    -19,  110, 59,  85,  58,   78,  111, 69,
    60,   61,  81,  17,  83,   102, 44,  72,
    -42,  60,  52,  7,   -9,   64,  70,  6,
    -172, -28, -79, -34, 0,    0,   122, -186,
};

pub fn eval(game: *const Game) i14 {
    const mg_phase = phase(&game.board);
    const eg_phase = 24 - mg_phase;
    var score: i32 = 0;
    for (0..16) |id| {
        const where = coord.compress(game.board.where[id]);
        score += switch (game.board.pieces[id]) {
            .none => 0,
            .k => k_mg[where] * mg_phase + k_eg[where] * eg_phase,
            .q => q_mg[where] * mg_phase + q_eg[where] * eg_phase,
            .r => r_mg[where] * mg_phase + r_eg[where] * eg_phase,
            .b => b_mg[where] * mg_phase + b_eg[where] * eg_phase,
            .n => n_mg[where] * mg_phase + n_eg[where] * eg_phase,
            .p => p_mg[where] * mg_phase + p_eg[where] * eg_phase,
        };
    }
    for (16..32) |id| {
        const where = coord.compress(game.board.where[id] ^ 0x70);
        score -= switch (game.board.pieces[id]) {
            .none => 0,
            .k => k_mg[where] * mg_phase + k_eg[where] * eg_phase,
            .q => q_mg[where] * mg_phase + q_eg[where] * eg_phase,
            .r => r_mg[where] * mg_phase + r_eg[where] * eg_phase,
            .b => b_mg[where] * mg_phase + b_eg[where] * eg_phase,
            .n => n_mg[where] * mg_phase + n_eg[where] * eg_phase,
            .p => p_mg[where] * mg_phase + p_eg[where] * eg_phase,
        };
    }
    score = @divTrunc(score, 24);
    return clampScore(switch (game.board.active_color) {
        .white => score,
        .black => -score,
    });
}

pub fn phase(board: *const Board) i32 {
    var result: i32 = 0;
    for (board.pieces) |ptype| {
        result += switch (ptype) {
            .none, .k, .p => 0,
            .q => 4,
            .r => 2,
            .b => 1,
            .n => 1,
        };
    }
    return @min(result, 24);
}

pub fn clampScore(raw: anytype) Score {
    return @intCast(std.math.clamp(raw, -8000, 8000));
}
pub fn isMateScore(score: Score) bool {
    return @abs(score) > 8000;
}
pub fn isMated(score: Score) bool {
    return score < -8000;
}
pub fn distanceToMate(score: Score) ?i32 {
    if (!isMateScore(score)) return null;
    const dist: i32 = @intCast(std.math.divCeil(u32, @abs(mated) - @abs(score), 2) catch unreachable);
    return std.math.sign(score) * dist;
}

pub const Score = i14;
pub const no_moves: Score = -std.math.maxInt(Score);
pub const draw: Score = 0;
pub const mated: Score = no_moves + 1;

const std = @import("std");
const Board = @import("Board.zig");
const Game = @import("Game.zig");
const coord = @import("coord.zig");
