// zig fmt: off
const p_mg = [_]i32{
    0,   0,   0,   0,   0,   0,   0,   0,
    175, 323, 260, 243, 305, 415, 515, 289,
    184, 279, 308, 286, 354, 272, 455, 285,
    160, 292, 280, 359, 354, 318, 334, 163,
    230, 312, 300, 339, 391, 330, 340, 208,
    199, 282, 365, 349, 396, 539, 311, 233,
    466, 501, 381, 476, 560, 610, 402, 211,
    0,   0,   0,   0,   0,   0,   0,   0,
};
const p_eg = [_]i32{
    0,   0,   0,   0,   0,   0,   0,   0,
    415, 380, 383, 385, 356, 347, 321, 315,
    373, 363, 307, 348, 327, 331, 320, 317,
    404, 369, 314, 300, 301, 299, 330, 338,
    478, 438, 390, 354, 315, 349, 393, 406,
    725, 713, 666, 600, 550, 512, 628, 645,
    947, 935, 915, 797, 772, 765, 896, 880,
    0,   0,   0,   0,   0,   0,   0,   0,
};
const n_mg = [_]i32{
    1274, 1435, 1310, 1410, 1398, 1447, 1422, 1230,
    1418, 1401, 1494, 1522, 1525, 1566, 1499, 1496,
    1440, 1493, 1582, 1562, 1597, 1560, 1595, 1436,
    1469, 1500, 1572, 1561, 1604, 1612, 1545, 1434,
    1534, 1578, 1567, 1715, 1600, 1686, 1531, 1618,
    1475, 1585, 1601, 1744, 1862, 1985, 1777, 1539,
    1245, 1378, 1798, 1594, 1810, 1766, 1487, 1461,
    589, 1132, 1286, 1270, 1565, 1030,  918,  950,
};
const n_eg = [_]i32{
    639, 686, 767, 796, 769, 792, 682, 707,
    726, 766, 789, 830, 814, 800, 745, 718,
    749, 823, 809, 889, 881, 832, 781, 711,
    779, 825, 898, 915, 919, 855, 813, 804,
    780, 863, 891, 905, 901, 880, 865, 762,
    723, 774, 878, 855, 760, 768, 725, 730,
    719, 772, 727, 792, 712, 699, 722, 645,
    791, 672, 753, 792, 686, 732, 749, 565,
};
const b_mg = [_]i32 {
    1661, 1573, 1641, 1586, 1565, 1574, 1600, 1606,
    1585, 1754, 1683, 1667, 1670, 1758, 1787, 1678,
    1726, 1720, 1719, 1690, 1715, 1717, 1693, 1707,
    1594, 1675, 1682, 1757, 1776, 1699, 1687, 1567,
    1560, 1638, 1730, 1750, 1751, 1683, 1681, 1628,
    1605, 1665, 1824, 1704, 1873, 1834, 1805, 1783,
    1568, 1680, 1616, 1594, 1709, 1849, 1644, 1738,
    1497, 1359, 1500, 1334, 1167, 1469, 1473, 1301,
};
const b_eg = [_]i32 {
    767, 837, 783, 874, 871, 834, 786, 798,
    851, 817, 849, 891, 907, 861, 841, 799,
    818, 877, 909, 932, 941, 899, 839, 810,
    865, 886, 939, 910, 904, 934, 858, 843,
    915, 937, 911, 930, 926, 896, 892, 844,
    886, 898, 886, 933, 859, 901, 854, 834,
    817, 872, 875, 861, 868, 814, 865, 735,
    847, 847, 838, 907, 908, 859, 815, 879,
};
const r_mg = [_]i32 {
    2007, 2023, 2082, 2096, 2115, 2062, 1991, 2046,
    1912, 1997, 2001, 2015, 2040, 2060, 2140, 1910,
    1932, 1980, 2041, 2082, 2084, 2050, 2159, 2081,
    1947, 1957, 1956, 2029, 2056, 2051, 2100, 2054,
    1944, 2027, 2142, 2174, 2115, 2129, 2232, 2199,
    2073, 2086, 2106, 2180, 2271, 2304, 2390, 2291,
    2093, 2071, 2208, 2266, 2237, 2353, 2427, 2347,
    2219, 2252, 2292, 2345, 2387, 2472, 2406, 2177,
};
const r_eg = [_]i32 {
    1657, 1689, 1688, 1716, 1660, 1652, 1661, 1542,
    1677, 1668, 1691, 1688, 1664, 1669, 1624, 1654,
    1663, 1675, 1662, 1648, 1648, 1634, 1586, 1600,
    1690, 1699, 1714, 1704, 1687, 1662, 1626, 1613,
    1710, 1691, 1680, 1657, 1666, 1668, 1620, 1618,
    1692, 1699, 1691, 1672, 1627, 1625, 1612, 1605,
    1695, 1737, 1695, 1677, 1651, 1630, 1602, 1593,
    1712, 1691, 1689, 1662, 1645, 1596, 1613, 1665,
};
const q_mg = [_]i32 {
    4152, 4097, 4142, 4207, 4119, 4054, 3995, 4162,
    4086, 4174, 4186, 4182, 4200, 4260, 4280, 4212,
    4100, 4185, 4150, 4166, 4153, 4189, 4202, 4157,
    4102, 4136, 4127, 4134, 4170, 4165, 4198, 4148,
    4063, 4105, 4115, 4126, 4152, 4165, 4124, 4242,
    4082, 4100, 4185, 4249, 4331, 4451, 4590, 4425,
    4093, 4053, 4061, 3954, 3964, 4539, 4240, 4609,
    3769, 3766, 3922, 4034, 4331, 4390, 4073, 3848,
};
const q_eg = [_]i32 {
    3000, 2992, 2971, 2841, 3043, 3009, 2976, 2842,
    3056, 3050, 3008, 3071, 3041, 2883, 2863, 2886,
    2963, 2943, 3124, 3090, 3153, 3095, 3087, 3007,
    3047, 3080, 3118, 3230, 3195, 3136, 3105, 3033,
    3018, 3132, 3112, 3219, 3275, 3292, 3210, 3101,
    2972, 3055, 3145, 3102, 3232, 3073, 2939, 2957,
    3040, 3078, 3170, 3309, 3339, 3149, 3186, 2746,
    3162, 3288, 3226, 3243, 3059, 2992, 3010, 3234,
};
const k_mg = [_]i32 {
    -195,  59,  -37, -286,  -47, -193,  101,   78,
      70, -80, -142, -341, -283, -174,   48,   49,
      54,  36, -275, -319, -305, -243,  -84, -142,
      82,  63,   48, -236, -224, -309, -195, -320,
     -84,  38,   94, -137, -154,  -84,   -9, -230,
     109, 548,  110,  265,  -18,  229,  313,   -1,
     214, 516,  423,  163,  253,  456,   37, -134,
     490, 245,  455,  302,  183,  351,  188,  106,
};
const k_eg = [_]i32 {
     -49,  -82, -35,   0, -82,  -5, -110, -197,
     -91,    6,  60, 113, 110,  95,   14,  -50,
    -113,   -5,  90, 125, 128, 117,   54,    9,
    -111,  -16,  40, 107, 116, 129,   78,   33,
     -73,    4,  40,  79,  74,  98,   80,   48,
     -52,  -20,  36,   2,  54,  69,   96,   57,
     -88,  -34, -42, -16,  -3,  33,  110,   69,
    -228, -111, -95, -88, -34, -28,   -8, -100,
};
// zig fmt: on

pub fn eval(game: *const Game) i32 {
    const mg_phase = phase(&game.board);
    const eg_phase = 24 - mg_phase;
    var score: i32 = 0;
    for (0..16) |id| {
        const where = coord.compress(game.board.where[id]);
        score += switch (game.board.pieces[id]) {
            .none => 0,
            .k => k_mg[where] * mg_phase + k_eg[where] * eg_phase,
            .q => q_mg[where] * mg_phase + q_eg[where] * eg_phase,
            .r => r_mg[where] * mg_phase + r_eg[where] * eg_phase,
            .b => b_mg[where] * mg_phase + b_eg[where] * eg_phase,
            .n => n_mg[where] * mg_phase + n_eg[where] * eg_phase,
            .p => p_mg[where] * mg_phase + p_eg[where] * eg_phase,
        };
    }
    for (16..32) |id| {
        const where = coord.compress(game.board.where[id] ^ 0x70);
        score -= switch (game.board.pieces[id]) {
            .none => 0,
            .k => k_mg[where] * mg_phase + k_eg[where] * eg_phase,
            .q => q_mg[where] * mg_phase + q_eg[where] * eg_phase,
            .r => r_mg[where] * mg_phase + r_eg[where] * eg_phase,
            .b => b_mg[where] * mg_phase + b_eg[where] * eg_phase,
            .n => n_mg[where] * mg_phase + n_eg[where] * eg_phase,
            .p => p_mg[where] * mg_phase + p_eg[where] * eg_phase,
        };
    }
    score = @divTrunc(score, 24);
    return switch (game.board.active_color) {
        .white => score,
        .black => -score,
    };
}

pub fn phase(board: *const Board) i32 {
    var result: i32 = 0;
    for (board.pieces) |ptype| {
        result += switch (ptype) {
            .none, .k, .p => 0,
            .q => 4,
            .r => 2,
            .b => 1,
            .n => 1,
        };
    }
    return @min(result, 24);
}

const Board = @import("Board.zig");
const Game = @import("Game.zig");
const coord = @import("coord.zig");
